@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject shipListUseCase shipListUseCase
@inject addShipUseCase addShipUseCase
@inject addShipImageUseCase addShipImageUseCase

@rendermode InteractiveServer

<DialogoError @ref="dialogo"/>

<div class="modal fade" id="cargarBarcoModal" tabindex="-1" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Cargar barco</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      @if (!string.IsNullOrEmpty(cartelito) && mostrarCartel) {
          <div class="alert alert-info">
              @cartelito
              <button class="btn btn primary " @onclick="() => setFalse()" >
                  <svg xmlns="http://www.w3.org/2000/svg" height="14" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                      <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                  </svg>
              </button>
          </div>
      }
      <form>
        <div class="modal-body form-body">
          <div>
              <label class="form-label">Tipo de barco</label>
              <select @bind=tipoBarco class="form-select">
                  <option style="display:none"></option>
                  <option value="Crucero">Crucero</option>
                  <option value="Velero">Velero</option>
                  <option value="Lancha">Lancha</option>
                  <option value="Catamaran">Catamarán</option>
              </select>
          </div>
          @if (tipoBarco == "") {
            <div>
              <label class="form-label">Modelo</label>
              <input type="text" class="form-control" required disabled>
            </div>
            <div >
              <label class="form-label">Descripción</label>
              <input type="text" class="form-control" required disabled>
            </div>
            <div>
              <label class="form-label">Fotos (1 a 3)</label>
              <InputFile  @key=@(_inputFileId) class="form-control" accept=".jpg, .png, .jpeg" OnChange="LoadFiles" multiple required disabled/>
            </div>
            <div>
              <label class="form-label">Eslora</label>
              <input type="number" min=0 class="form-control" required disabled>
            </div>
             <div>
              <label class="form-label">Manga</label>
              <input type="number" min=0 class="form-control" required disabled>
            </div>
             <div>
              <label class="form-label">Calado</label>
              <input type="number" min=0 class="form-control" required disabled>
            </div>
            <div >
              <label class="form-label">Matrícula</label>
              <input type="text" class="form-control" required disabled>
            </div>
            <div>
              <label class="form-label">Tiene motor</label>
              <select @bind=tieneMotor class="form-select" required disabled>
                  <option value="" style="display:none"></option>
                  <option value="si">Si</option>
                  <option value="no">No</option>
              </select>
            </div>
          } else {
            <div>
              <label class="form-label">Modelo</label>
              <input type="text" class="form-control" @bind=barco.model required>
            </div>
            <div >
              <label class="form-label">Descripción</label>
              <input type="text" class="form-control" @bind=barco.description required>
            </div>
            <div>
              <label class="form-label">Fotos (1 a 3)</label>
              <InputFile  @key=@(_inputFileId) class="form-control" accept=".jpg, .png, .jpeg" OnChange="LoadFiles" multiple required/>
            </div>
            <div>
              <label class="form-label">Eslora</label>
              <input type="number" min=0 class="form-control" @bind=barco.eslora required>
            </div>
             <div>
              <label class="form-label">Manga</label>
              <input type="number" min=0 class="form-control" @bind=barco.manga required>
            </div>
             <div>
              <label class="form-label">Calado</label>
              <input type="number" min=0 class="form-control" @bind=barco.calado required>
            </div>
            <div>
              <label class="form-label">Matrícula</label>
              <input type="text" class="form-control" @bind=barco.plate required>
            </div>
            <div>
              <label class="form-label">Tiene motor</label>
              <select @bind=tieneMotor class="form-select" required>
                  <option value="" style="display:none"></option>
                  <option value="si">Si</option>
                  <option value="no">No</option>
              </select>
            </div>
          }

          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>
              <button type="button" class="btn btn-success" @onclick="Aceptar">Cargar</button>
          </div>
        </form>
      </div>
    </div>
</div>

@code {
    int userId;
    DialogoError dialogo = null!;
    string? cartelito;
    bool mostrarCartel;

    string tipoBarco = ""; // Uso esta variable para el input de cantidad de puertas
    string tieneMotor = "";
    Ship barco = new Ship();
    Ship newBarco = new Ship();

    private int maxAllowedFiles = 3; // Cantidad máxima de fotos que permite ingresar
    private int cantFiles = 0;
    private List<byte[]> fileBytesList = new List<byte[]>(); // Lista de arrays de bytes para las fotos
    private string _inputFileId = Guid.NewGuid().ToString(); // Se usa para limpiar el input

    protected override async Task OnInitializedAsync() {
        var result = await sessionStorage.GetAsync<int>("userId");
        userId = result.Success ? result.Value : 0;
    }

    // Pone el tipoVehiculo en vacio para que se reinicie el formulario
    public void ReiniciarForm() {
        barco = new Ship();
        tipoBarco = "";
        tieneMotor = "";
        fileBytesList = new List<byte[]>();
    }

    public void CerrarCartel() {
        mostrarCartel = false;
        StateHasChanged();
    }

    // Crea una lista de arrays de bytes con las fotos
    // No pregunten mucho que hace, lo importante es que funciona :)
    private async Task LoadFiles(InputFileChangeEventArgs e) {
        cantFiles = 0;
        try {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles)) {
                if (ValidateFileType(file.ContentType)) {
                    try {
                        using (var memoryStream = new MemoryStream()) {
                            using (var fileStream = file.OpenReadStream()) {
                                await fileStream.CopyToAsync(memoryStream);
                            }
                            fileBytesList.Add(memoryStream.ToArray());
                            cantFiles += 1;
                        }
                    } catch (Exception ex) {
                        // Handle any errors that occur during file processing
                        Console.WriteLine($"Error reading file: {ex.Message}");
                    }
                } else {
                    _inputFileId = Guid.NewGuid().ToString(); // Reinicio los archivos ingresados
                    cantFiles = 0;
                    break;
                }
            }
        } catch {
            // Si se meten más fotos que maxAlloweFiles entrá acá
            dialogo.Mostrar("La cantidad máxima de fotos es 3.");

            // Actualiza algo del input y lo vuelve a generar, haciendo que 
            // desaparezcan los archivos que había cargado
            _inputFileId = Guid.NewGuid().ToString();
        }
    }

    public void Aceptar() {
        if (string.IsNullOrEmpty(barco.plate) || string.IsNullOrEmpty(barco.description) || string.IsNullOrEmpty(barco.model) || string.IsNullOrEmpty(tieneMotor)) {
            dialogo.Mostrar("Debe completar los campos para cargar el barco");
            return;
        }

        if (!ValidarDatos()) {
            return;
        }

        if (tieneMotor == "si") {
            barco.hasEngine = true;
        } else if (tieneMotor == "no") {
            barco.hasEngine = false;
        }

        newBarco = new Ship(userId, tipoBarco, barco.plate, barco.description, barco.model, barco.eslora, barco.manga, barco.calado, barco.hasEngine);

        if (AddShip()) {
            mostrarCartel = true;
            cartelito = "Barco cargado con exito";
            SubirFotos();
            ReiniciarForm();
        } else {
            return;
        }
    }

    private bool ValidarDatos() {
        if (cantFiles == 0) {
            dialogo.Mostrar("Se debe subir al menos una foto.");
            return false;
        } else if (cantFiles > 3) {
            dialogo.Mostrar("La cantidad máxima de fotos es 3.");
            return false;
        } else if (tieneMotor == "") {
            return false;
        }
        return true;
    }

    // Valida que las extensiones sean correctas
    private bool ValidateFileType(string file) {
        string extension = file.Split('/')[1];

        if (extension != "png" && extension != "jpeg" && extension != "jpg") {
            dialogo.Mostrar("Los archivos ingresados deben ser .jpg o .png.");
            return false;
        }

        return true;
    }

    // Agrega las fotos a la db
    private void SubirFotos() {
        newBarco = shipListUseCase.Execute().Where(elem => elem.plate == newBarco.plate).SingleOrDefault(new Ship());

        foreach (var img in fileBytesList) {
            addShipImageUseCase.Execute(newBarco.Id, img);
        }
    }

    private bool AddShip() {
        try {
            addShipUseCase.Execute(newBarco);
            return true;
        }
        catch (Exception ex) {
            if (ex.Message == "Plate number already registered") {
                dialogo.Mostrar("La matrícula ingresada ya se encuentra registrada.");
            }
            return false;
        }
    }

    private void setFalse () {
        this.mostrarCartel = false;
    }
}