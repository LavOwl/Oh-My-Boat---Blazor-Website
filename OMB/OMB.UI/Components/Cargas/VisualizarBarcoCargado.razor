@inject listShipImagesUseCase listShipImagesUseCase
@inject modifyShipUseCase modifyShipUseCase
@inject ProtectedSessionStorage sessionStorage
@inject listPostUseCase listPostUseCase
@inject addPostUseCase addPostUseCase
@inject deletePostUseCase deletePostUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject offerListUseCase offerListUseCase
@inject modifyOfferUseCase modifyOfferUseCase

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@rendermode InteractiveServer

<DialogoError @ref="dialogoError"/>
<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="eliminarPublicacion"/>

<div class="modal fade" id="visualizarBarcoCargadoModal" tabindex="-1" data-bs-backdrop="static">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Tu barco cargado</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" 
        data-bs-toggle="modal" data-bs-target="#listarBarcosModal"></button>
      </div>
        <form>
          <div class="modal-body form-body">
            <div class="carousel-container">
              <div id="carousel" class="carousel slide">
                <div class="carousel-inner">
                  <div class="carousel-item active">
                    <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(images[i]))"
                    height="280px" width="100%" style="object-fit: cover;"/>
                  </div>
                </div>
                <button class="carousel-control-prev" type="button" @onclick=MoveLeft>
                  <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                  <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" @onclick=MoveRight>
                  <span class="carousel-control-next-icon" aria-hidden="true"></span>
                  <span class="visually-hidden">Next</span>
                </button>
              </div>
            </div>

             <div>
              <label class="form-label">Tipo</label>
              <select @bind=barco.type class="form-select" required>
                  <option value="" style="display:none"></option>
                  <option value="Catamaran">Catamaran</option>
                  <option value="Velero">Velero</option>
                  <option value="Crucero">Crucero</option>
                  <option value="Lancha">Lancha</option>
              </select>
            </div>   
            <div>
              <label class="form-label">Modelo</label>
              <input type="text" class="form-control" @bind=barco.model required>
            </div>
            <div >
              <label class="form-label">Descripción</label>
              <input type="text" class="form-control" @bind=barco.description required>
            </div>
            <div>
              <label class="form-label">Eslora</label>
              <input type="number" min=0 class="form-control" @bind=barco.eslora required>
            </div>
             <div>
              <label class="form-label">Manga</label>
              <input type="number" min=0 class="form-control" @bind=barco.manga required>
            </div>
             <div>
              <label class="form-label">Calado</label>
              <input type="number" min=0 class="form-control" @bind=barco.calado required>
            </div>
            <div >
              <label class="form-label">Matrícula</label>
              <input type="text" class="form-control" @bind=barco.plate required>
            </div>
            <div>
              <label class="form-label">Tiene motor</label>
              <select @bind=tieneMotor class="form-select" required>
                  <option value="" style="display:none"></option>
                  <option value="si">Si</option>
                  <option value="no">No</option>
              </select>
            </div>
          </div>
        </form>
        @if (!string.IsNullOrEmpty(cartelito) && mostrarCartel) {
          <div class="alert alert-info">
              @cartelito
              <button class="btn btn primary" @onclick="() => setFalse()" >
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                      <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                  </svg>
              </button>
          </div>
        }
        <div class="modal-footer">
            @if(publicando){
              <br>
              <input class="form-control" placeholder="Título para su publicación" type="text" @bind=title required>
            }
            @if(!intercambiandose(barco)){
              <button class="btn btn-primary" @onclick="()=>modificarBarco()">Modificar</button>
            }
            else{
              <div class="disabled"><button class="btn btn-primary" disabled>Modificar</button></div>
            }
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal" 
            data-bs-toggle="modal" data-bs-target="#listarBarcosModal">Cerrar</button>
            @if(!publicando && !publicado){
              <button class="btn btn-success" @onclick="()=>confirmarPublicar()">Publicar</button>
            }
            else{
              if(publicando){
                <button class="btn btn-danger" @onclick="()=>turnOff()">Cancelar Publicación</button>
                <button class="btn btn-success" @onclick="()=>publicar()">Confirmar Publicación</button>
              }
              else{
                <button class="btn btn-danger" @onclick="()=>confirmarEliminar()">Eliminar Publicación</button>
              }
            }
        </div>
      </div>
    </div>
</div>


@code {
    int i = 0;
    int limit = 0;
    string tieneMotor = "no";
    DialogoError dialogoError = null!;
    DialogoConfirmacion dialogoConfirmacion = null!;

    bool publicando = false;
    bool publicado;
    string title = "";

    string? cartelito;
    bool mostrarCartel;

    Ship barco = new Ship();
    List<byte[]> images = new List<byte[]>();

    protected override void OnInitialized() {
      images.Add(new byte[0]);
    }

    public void Cargar(Ship barco) {
      this.barco = new Ship(barco.UserId, barco.type, barco.plate, barco.description, barco.model, barco.eslora, barco.manga, barco.calado, barco.hasEngine){Id = barco.Id};
        publicado = listPostUseCase.Execute().Where(p => p.TransportId == barco.Id).Count() > 0;
      tieneMotor = barco.hasEngine ? "si" : "no";
      i = 0;
      publicando = false;
      mostrarCartel = false;
      title = "";
      GetImages();
      StateHasChanged();
    }

    public void confirmarEliminar(){
      dialogoConfirmacion.Mostrar("¿Seguro que desea eliminar esta publicación? Todas las ofertas asociadas serán eliminadas");
    }

    public void eliminarPublicacion(){
        var post = listPostUseCase.Execute().Where(p => p.TransportId == barco.Id).SingleOrDefault();
      if (post != null) {
            List<Offer> ofertas = offerListUseCase.Execute().Where(o => o.transportePosteadoId == post.TransportId).ToList();
        foreach(Offer offer in ofertas){
          offer.transportePosteadoId = 1;
          modifyOfferUseCase.Execute(offer);
        }
        deletePostUseCase.Execute(post.Id);
        publicado = false;
      }
    }

    private bool intercambiandose(Ship ship){
      return unresolvedExchangeListUseCase.Execute().Where(e => ((e.transportePosteadoId == ship.Id) || (e.transporteOfertadoId == ship.Id))).Count() > 0;
    }

    public void turnOff(){
      publicando = false;
    }
    public void confirmarPublicar(){
      publicando = true;
      StateHasChanged();
    }

    public void publicar(){
      if(string.IsNullOrEmpty(this.title)){
        dialogoError.Mostrar("Por favor ponga un título antes de publicar");
      }
      else{
          addPostUseCase.Execute(new Post(barco.Id, this.title));
          publicando = false;
          publicado = true;
          mostrarCartel = true;
          cartelito = "Publicacion exitosa";
          StateHasChanged();
      }
    }
    
    private void GetImages() {
      images = new List<byte[]>();
      var shipImages = listShipImagesUseCase.Execute().Where(img => img.ShipId == barco.Id);

      foreach (var img in shipImages) {
        images.Add(img.Image);
      }

      limit = images.Count() - 1;
    }

    public void MoveRight() {
      if (i < limit) i++;
      else i = 0;

      StateHasChanged();
    }

    public void MoveLeft() {
      if (i > 0) i--;
      else i = limit;

      StateHasChanged();
    }

    [Parameter]
    public EventCallback OnModificado { get; set; }

    // Hay un error con las patentes que hay que revisar
    void modificarBarco() {
      if(string.IsNullOrEmpty(barco.description) || string.IsNullOrEmpty(barco.model) || string.IsNullOrEmpty(barco.plate)){
        dialogoError.Mostrar("Por favor rellene todos los campos antes de intentar modificar");
      }
      else{
      try {
        barco.hasEngine = tieneMotor == "si" ? true : false;
        mostrarCartel = true;
        cartelito = "Barco modificado";
        modifyShipUseCase.Execute(barco);
        OnModificado.InvokeAsync();
      }
      catch (Exception ex) {
        if (ex.Message == "This plate is already in our database") {
          dialogoError.Mostrar("La patente ingresada ya se encuentra registrada.");
        }
      }
      }
    }

    private void setFalse () {
      this.mostrarCartel = false;
   }
}