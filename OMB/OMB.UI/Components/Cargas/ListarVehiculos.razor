@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject vehicleListUseCase vehicleListUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject modifyVehicleUseCase modifyVehicleUseCase
@inject deleteVehicleUseCase deleteVehicleUseCase
@inject addPostUseCase addPostUseCase
@inject offerListUseCase offerListUseCase
@inject modifyOfferUseCase modifyOfferUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase

@rendermode InteractiveServer

<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="eliminarVehiculo"/>
<DialogoError @ref="dialogoError"/>

<div class="modal fade" id="listarVehiculosModal" tabindex="-1" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Tus vehículos cargados</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="modal-body form-body">
          @if (_vehicles.Count != 0) {
            <table class="table table-striped table-bordered">
              <thead>
                <tr>
                  <th>IMAGEN</th>
                  <th>TIPO</th>
                  <th>MODELO</th>
                  <th>PATENTE</th>
                  <th>ACCIONES</th>
                </tr>
              </thead>
              <tbody>
                @{int i = 0;}
                @foreach (var vehiculo in _vehicles) {
                  <tr>
                    <td>
                      <div class="img">
                        <img @onclick="()=>VisualizarVehiculo(vehiculo)" data-bs-toggle="modal" data-bs-target="#visualizarVehiculoCargadoModal"
                        src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_images[i]))"/>
                      </div>
                    </td>
                    <td>
                      @vehiculo.type[0].ToString().ToUpper()@vehiculo.type.Substring(1)
                    </td>
                    <td>@vehiculo.model</td>
                    <td>@vehiculo.plate</td>
                    <td>
                      @if(!intercambiandose(vehiculo)){
                        <button class="btn btn-danger" @onclick="()=>confirmarEliminacion(vehiculo)">
                            <i class='bx bxs-trash-alt'></i>
                        </button>
                      }
                      else{
                        <div class="disabled"><button class="btn btn-danger" disabled>
                          <i class='bx bxs-trash-alt'></i>
                      </button></div>
                      }
                    </td>
                  </tr>
                  i++;
                }
              </tbody>
            </table>
          } else {
            <h3 class="text-center m-5">Todavía no hay vehículos cargados</h3>
          }
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
</div>

<VisualizarVehiculoCargado @ref="visualizarVehiculo" OnModificado="GetVehiculosCargados" />

@code {
    int userId;

    List<Vehicle> _vehicles = new List<Vehicle>();
    List<VehicleImage> _allImages = new List<VehicleImage>();
    List<byte[]> _images = new List<byte[]>();

    DialogoConfirmacion dialogoConfirmacion = null!;
    DialogoError dialogoError = null!;

    Vehicle vehicleAux = new Vehicle();
    VisualizarVehiculoCargado visualizarVehiculo = null!;

    protected override async Task OnInitializedAsync() {
        var result = await sessionStorage.GetAsync<int>("userId");
        userId = result.Success ? result.Value : 0;
        GetVehiculosCargados();
    }

    // Cada vez que se abre el modal se debe llamar a Cargar
    public void Cargar() {
        GetVehiculosCargados();
        StateHasChanged();
    }

    private bool intercambiandose(Vehicle vehicle){
        return unresolvedExchangeListUseCase.Execute().Where(e => ((e.transportePosteadoId == vehicle.Id) || (e.transporteOfertadoId == vehicle.Id))).Count() > 0;
    }

    private void GetVehiculosCargados() {
        _vehicles = vehicleListUseCase.Execute();
        _vehicles = _vehicles.FindAll(vehiculo => vehiculo.UserId == userId);

        GetImagenesVehiculos();
    }

    private void GetImagenesVehiculos() {
        _allImages = listVehicleImagesUseCase.Execute();
        _images = new List<byte[]>();

        foreach (var vehiculo in _vehicles) {
            var imagen = _allImages.Find(imagen => imagen.VehicleId == vehiculo.Id);
            byte[] image = imagen?.Image ?? Array.Empty<byte>();
            _images.Add(image);
        }
    }

    private void confirmarEliminacion(Vehicle vehiculo) {
        vehicleAux = vehiculo;
        dialogoConfirmacion.Mostrar("¿Seguro qué deseas eliminar el vehiculo?");
    }

    private void eliminarVehiculo() {
        List<Offer> ofertas = offerListUseCase.Execute().Where(o => o.transportePosteadoId == vehicleAux.Id).ToList();
        foreach(Offer offer in ofertas){
            offer.transportePosteadoId = 1;
            modifyOfferUseCase.Execute(offer);
        }

        deleteVehicleUseCase.Execute(vehicleAux.Id);
        GetVehiculosCargados();
    }

    public void VisualizarVehiculo(Vehicle vehiculo) {
        visualizarVehiculo.Cargar(vehiculo);
    }
}