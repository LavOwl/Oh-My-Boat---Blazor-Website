@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject vehicleListUseCase vehicleListUseCase
@inject addVehicleUseCase addVehicleUseCase
@inject addVehicleImageUseCase addVehicleImageUseCase

@rendermode InteractiveServer

<DialogoError @ref="dialogo"/>

<div class="modal fade" id="cargarVehiculoModal" tabindex="-1" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Cargar vehículo</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      @if (!string.IsNullOrEmpty(cartelito) && mostrarCartel) {
          <div class="alert alert-info">
              @cartelito
              <button class="btn btn primary " @onclick="() => setFalse()" >
                  <svg xmlns="http://www.w3.org/2000/svg" height="14" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                      <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                  </svg>
              </button>
          </div>
      }
      <form>
        <div class="modal-body form-body">
          <div>
              <label class="form-label">Tipo de vehículo</label>
              <select @bind="tipoVehiculo" class="form-select" required>
                  <option style="display:none"></option>
                  <option value="Camioneta">Camioneta</option>
                  <option value="Auto">Auto</option>
                  <option value="Ciclomotor">Ciclomotor</option>
              </select>
          </div>

          @if (tipoVehiculo == "") {
            <div>
                <label class="form-label">Modelo</label>
                <input type="text" class="form-control" required disabled>
            </div>
            <div >
              <label class="form-label">Descripción</label>
              <input type="text" class="form-control" required disabled>
            </div>
            <div>
                <label class="form-label">Fotos (1 a 3)</label>
                <InputFile  @key=@(_inputFileId) class="form-control" accept=".jpg, .png" OnChange="LoadFiles" multiple required disabled/>
            </div>
            <div>
                <label class="form-label">Kilometraje (Km)</label>
                <input type="number" min=0 class="form-control" required disabled>
            </div>
            <div >
                <label class="form-label">Patente</label>
                <input type="text" class="form-control" required disabled>
            </div>
            <div >
                <label class="form-label">Cantidad de puertas</label>
                <input type="number" min=0 class="form-control" required disabled>
            </div>
          } else {
            <div>
              <label class="form-label">Modelo</label>
              <input type="text" class="form-control" @bind=vehiculo.model required>
            </div>
            <div >
              <label class="form-label">Descripción</label>
              <input type="text" class="form-control" @bind=vehiculo.description required>
            </div>
            <div>
              <label class="form-label">Fotos (1 a 3)</label>
              <InputFile  @key=@(_inputFileId) class="form-control" accept=".jpg, .png, .jpeg" OnChange="LoadFiles" multiple required/>
            </div>
            <div>
              <label class="form-label">Kilometraje (Km)</label>
              <input type="number" min=0 class="form-control" @bind=vehiculo.kms required>
            </div>
            <div >
              <label class="form-label">Patente</label>
              <input type="text" class="form-control" @bind=vehiculo.plate required>
            </div>
            @if (tipoVehiculo != "Ciclomotor") {
              <div >
                <label class="form-label">Cantidad de puertas</label>
                <input type="number" min=0 class="form-control" @bind=vehiculo.doors required>
              </div>
            }
          }
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>
              <button type="button" class="btn btn-success" @onclick="Aceptar">Cargar</button>
          </div>
        </form>
      </div>
    </div>
</div>

@code {
    int userId;
    DialogoError dialogo = null!;
    string? cartelito;
    bool mostrarCartel;

    string tipoVehiculo = ""; // Uso esta variable para el input de cantidad de puertas
    Vehicle vehiculo = new Vehicle();
    Vehicle newVehiculo = new Vehicle();

    private int maxAllowedFiles = 3; // Cantidad máxima de fotos que permite ingresar
    private int cantFiles = 0;
    private List<byte[]> fileBytesList = new List<byte[]>(); // Lista de arrays de bytes para las fotos
    private string _inputFileId = Guid.NewGuid().ToString(); // Se usa para limpiar el input

    protected override async Task OnInitializedAsync() {
      var result = await sessionStorage.GetAsync<int>("userId");
      userId = result.Success ? result.Value : 0;
    }
    // Pone el tipoVehiculo en vacio para que se reinicie el formulario
    public void ReiniciarForm() {
      vehiculo = new Vehicle();
      tipoVehiculo = "";
      fileBytesList = new List<byte[]>();
    }

    public void CerrarCartel() {
      mostrarCartel = false;
      StateHasChanged();
    }

    // Crea una lista de arrays de bytes con las fotos
    // No pregunten mucho que hace, lo importante es que funciona :)
    private async Task LoadFiles(InputFileChangeEventArgs e) {
      cantFiles = 0;
      try {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles)) {
          if (ValidateFileType(file.ContentType)) {
            try {
              using (var memoryStream = new MemoryStream()) {
                using (var fileStream = file.OpenReadStream()) {
                  await fileStream.CopyToAsync(memoryStream);
                }
                fileBytesList.Add(memoryStream.ToArray());
                cantFiles += 1;
              }
            } catch (Exception ex) {
              // Handle any errors that occur during file processing
              Console.WriteLine($"Error reading file: {ex.Message}");
            }
          } else {
            _inputFileId = Guid.NewGuid().ToString(); // Reinicio los archivos ingresados
            cantFiles = 0;
            break;
          }
        }
      } catch {
        // Si se meten más fotos que maxAlloweFiles entrá acá
        dialogo.Mostrar("La cantidad máxima de fotos es 3.");

        // Actualiza algo del input y lo vuelve a generar, haciendo que 
        // desaparezcan los archivos que había cargado
        _inputFileId = Guid.NewGuid().ToString();
      }
    }

    public void Aceptar() {
      if (string.IsNullOrEmpty(tipoVehiculo) || string.IsNullOrEmpty(vehiculo.plate) || string.IsNullOrEmpty(vehiculo.description) || string.IsNullOrEmpty(vehiculo.model)) {
        dialogo.Mostrar("Debe completar los campos para cargar el vehiculo");
        return;
      }
      
      if (!ValidarDatos()) {
        return;
      }

      if (tipoVehiculo == "Ciclomotor") {
        vehiculo.doors = 0;
      }

      newVehiculo = new Vehicle(userId, tipoVehiculo, vehiculo.plate, vehiculo.description, vehiculo.model, vehiculo.kms, vehiculo.doors);

      if (AddVehicle()) {
        mostrarCartel = true;
        cartelito = "Vehiculo cargado con exito";
        SubirFotos();
        ReiniciarForm();
      } else {
        return;
      }
    }

    private bool ValidarDatos() {
      if (cantFiles == 0) {
        dialogo.Mostrar("Se debe subir al menos una foto.");
        return false;
      } else if (cantFiles > 3) {
        dialogo.Mostrar("La cantidad máxima de fotos es 3.");
        return false;
      }
      return true;
    }

    // Valida que las extensiones sean correctas
    private bool ValidateFileType(string file) {
      string extension = file.Split('/')[1];

      if (extension != "png" && extension != "jpeg" && extension != "jpg") {
        dialogo.Mostrar("Los archivos ingresados deben ser .jpg o .png.");
        return false;
      }

      return true;
    }

    // Agrega las fotos a la db
    private void SubirFotos() {
      	newVehiculo = vehicleListUseCase.Execute().Where(elem => elem.plate == newVehiculo.plate).SingleOrDefault(new Vehicle());

		foreach (var img in fileBytesList) {
			addVehicleImageUseCase.Execute(newVehiculo.Id, img);
      	}
    }

    private bool AddVehicle() {
      try {
        addVehicleUseCase.Execute(newVehiculo);
        return true;
      }
      catch (Exception ex) {
        if (ex.Message == "Plate number already registered") {
          dialogo.Mostrar("La patente ingresada ya se encuentra registrada.");
        }
        return false;
      }
    }
    private void setFalse () {
      this.mostrarCartel = false;
    }

}