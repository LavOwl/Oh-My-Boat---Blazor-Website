@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject listTransportUseCase listTransportUseCase
@inject addOfferUseCase addOfferUseCase
@inject offerListUseCase offerListUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject userListUseCase userListUseCase
@inject listPostUseCase listPostUseCase

@rendermode InteractiveServer

<DialogoConfirmacion @ref="dialogo" OnConfirmado="OfertarDef"/>

<div class="modal fade" id="listarTransportesModal" tabindex="-1" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Selecciona un transporte a ofertar</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body form-body">
          @if (_transports.Count != 0) {
            <table class="table table-striped table-bordered">
              <thead>
                <tr>
                  <th>IMAGEN</th>
                  <th>TIPO</th>
                  <th>MODELO</th>
                  <th>MATRICULA/PATENTE</th>
                </tr>
              </thead>
              <tbody>
                @{int i = 0;}
                @foreach (var transport in _transports) {
                  <tr style="cursor-pointer">
                    <td @onclick="() => confirmarOfertar(transport)">
                        <div class="img">
                           <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_images[i]))" height="80px" width="80px" />
                        </div>
                    </td>
                    <td @onclick="() => confirmarOfertar(transport)">
                      @transport.type[0].ToString().ToUpper()@transport.type.Substring(1)
                    </td>
                    <td @onclick="() => confirmarOfertar(transport)">@transport.model</td>
                    <td @onclick="() => confirmarOfertar(transport)">@transport.plate</td>
                  </tr>
                  i++;
                }
              </tbody>
            </table>
          } else {
            <h3 class="text-center m-5">No hay transportes para ofertar a esta publicación</h3>
          }
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
</div>

<Emails @ref=emails/>

@code {
    int userId;

    List<Transport> _transports = new List<Transport>();
    List<byte[]> _images = new List<byte[]>();

    DialogoConfirmacion dialogo = null!;
    Transport? transporteAOfertar;

    Ship ship = new Ship();
    Emails emails = null!;

    protected override async Task OnInitializedAsync() {
        var result = await sessionStorage.GetAsync<int>("userId");
        userId = result.Success ? result.Value : 0;
    }

    // Cada vez que se abre el modal se debe llamar a Cargar
    public void Cargar(Ship s) {
        ship = s;
        GetTransportesCargados();
        StateHasChanged();
    }

    private void GetTransportesCargados() {
        List<Offer> ofertas = offerListUseCase.Execute();
        List<UnresolvedExchange> exchanges = unresolvedExchangeListUseCase.Execute();
        _transports = listTransportUseCase.Execute();
        _transports = _transports.FindAll(tra => tra.UserId == userId);
        _transports.RemoveAll(t => ofertas.Where(o => o.transporteOfertadoId == t.Id).Where(o => o.transportePosteadoId == ship.Id).SingleOrDefault() != null);
        _transports.RemoveAll(t => exchanges.Where(e => (e.transporteOfertadoId == t.Id) || (e.transportePosteadoId == t.Id)).Count() != 0);

        GetImagenesTransportes();
    }

    private void GetImagenesTransportes() {
        List<ShipImage> _shImages = listShipImagesUseCase.Execute();
        List<VehicleImage> _veImages = listVehicleImagesUseCase.Execute();
        _images = new List<byte[]>();

        foreach (var trans in _transports) {
            byte[] image = (_shImages.Any(imagen => imagen.ShipId == trans.Id)) ? _shImages.Where(imagen => imagen.ShipId == trans.Id).First().Image : _veImages.Where((imagen => imagen.VehicleId == trans.Id)).First().Image;
            _images.Add(image);
        }
    }

    private void confirmarOfertar(Transport transporte) {
        transporteAOfertar = transporte;
        dialogo.Mostrar("¿Seguro qué deseas ofertar tu " + transporteAOfertar.type + " " + transporteAOfertar.model + "?");
    }

    private void OfertarDef() {
        if (transporteAOfertar == null)
            throw new Exception("De todas formas no se debería llegar acá");

        addOfferUseCase.Execute(new Offer(ship.Id, transporteAOfertar.Id));

        User user = getUser();
        string title = getTitle();
        // Manda mail al dueño
        emails.SendEmail(
        "¡Tenés una oferta!", // Subject
        user.mail, // Mail
        "¡Te hicieron una oferta!", // Titulo
        $@"
        <p style='line-height: 140%;color: #f4f4f4;margin-bottom: 0;'>¡Tu publicación <b>{title}</b> recibió una oferta!</p>
        <p style='line-height: 140%;color: #f4f4f4;margin-top: 0;'>Podeés ingresar a la página para ver la oferta</p>
        " // Cuerpo
        );

        GetTransportesCargados();
    }

    private User getUser() {
        Transport transport = listTransportUseCase.Execute().Find(trans => trans.Id == ship.Id) ?? throw new Exception("transport not found");
        return userListUseCase.Execute().Find(user => user.Id == transport.UserId) ?? throw new Exception("user not found");
    }

    private string getTitle() {
        Post post = listPostUseCase.Execute().Find(post => post.TransportId == ship.Id) ?? throw new Exception("post not found");
        return post.Title;
    }
}