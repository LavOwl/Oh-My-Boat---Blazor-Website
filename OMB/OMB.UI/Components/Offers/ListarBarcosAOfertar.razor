@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject shipListUseCase shipListUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject modifyShipUseCase modifyShipUseCase
@inject deleteShipUseCase deleteShipUseCase
@inject addOfferUseCase addOfferUseCase
@inject offerListUseCase offerListUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject listTransportUseCase listTransportUseCase
@inject userListUseCase userListUseCase
@inject listPostUseCase listPostUseCase

@rendermode InteractiveServer

<DialogoConfirmacion @ref="dialogo" OnConfirmado="OfertarDef"/>

<div class="modal fade" id="listarBarcosModal" tabindex="-1" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Seleccioná un barco a ofertar</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="modal-body form-body">
          @if (_ships.Count != 0) {
            <table class="table table-striped table-bordered">
              <thead>
                <tr>
                  <th>IMAGEN</th>
                  <th>TIPO</th>
                  <th>MODELO</th>
                  <th>MATRÍCULA</th>
                </tr>
              </thead>
              <tbody>
                @{int i = 0;}
                @foreach (var barco in _ships) {
                  <tr style="cursor:pointer;" @onclick="() => confirmarOfertar(barco)">
                    <td>
                      <div class="img">
                        <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_images[i]))"/>
                      </div>
                    </td>
                    <td>
                      @barco.type[0].ToString().ToUpper()@barco.type.Substring(1)
                    </td>
                    <td>@barco.model</td>
                    <td>@barco.plate</td>
                  </tr>
                  
                  i++;
                }
              </tbody>
            </table>
          } else {
            <h3 class="text-center m-5">No hay barcos para ofertar a esta publicación</h3>
          }
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
</div>

<Emails @ref=emails/>

@code {
    int userId;
    
    List<Ship> _ships = new List<Ship>();
    List<ShipImage> _allImages = new List<ShipImage>();
    List<byte[]> _images = new List<byte[]>();

    DialogoConfirmacion dialogo = null!;
    Ship barcoAOfertar = new Ship();

    Vehicle vehicle = new Vehicle();
    Emails emails = null!;

    protected override async Task OnInitializedAsync() {
      var result = await sessionStorage.GetAsync<int>("userId");
      userId = result.Success ? result.Value : 0;
    }

    // Cada vez que se abre el modal se debe llamar a Cargar
    public void Cargar(Vehicle ve) {
      vehicle = ve;
      GetBarcosCargados();
      StateHasChanged();
    }

    private void GetBarcosCargados() {
      List<Offer> ofertas = offerListUseCase.Execute();
      List<UnresolvedExchange> exchanges = unresolvedExchangeListUseCase.Execute();
      _ships = shipListUseCase.Execute();
      _ships = _ships.FindAll(ship => ship.UserId == userId);
      _ships.RemoveAll(s => ofertas.Where(o => ((o.transporteOfertadoId == s.Id) && (o.transportePosteadoId == vehicle.Id))).SingleOrDefault() != null);
      _ships.RemoveAll(s => exchanges.Where(e => (e.transporteOfertadoId == s.Id) || (e.transportePosteadoId == s.Id)).SingleOrDefault() != null);


      GetImagenesBarcos();
    }

    private void GetImagenesBarcos() {
        // Suponiendo que _allImages y _ships están inicializados y no son null
        _allImages = listShipImagesUseCase.Execute();
        _images = new List<byte[]>();

        foreach (var barco in _ships) {
            // Usar el operador null-conditional para evitar null reference exception
            var imagenBarco = _allImages?.Find(imagen => imagen.ShipId == barco.Id);
            if (imagenBarco?.Image != null) {
                _images.Add(imagenBarco.Image);
            }
        }
    }

    private void confirmarOfertar(Ship barco) {
      barcoAOfertar = barco;
      dialogo.Mostrar("¿Seguro qué deseas ofertar tu " + barcoAOfertar.type + " " + barcoAOfertar.model + "?");
    }

    private void OfertarDef() {
      addOfferUseCase.Execute(new Offer(vehicle.Id, barcoAOfertar.Id));

      User user = getUser();
      string title = getTitle();
      // Manda mail al dueño
      emails.SendEmail(
        "¡Tenés una oferta!", // Subject
        user.mail, // Mail
        "¡Te hicieron una oferta!", // Titulo
        $@"
        <p style='line-height: 140%;color: #f4f4f4;margin-bottom: 0;'>¡Tu publicación <b>{title}</b> recibió una oferta!</p>
        <p style='line-height: 140%;color: #f4f4f4;margin-top: 0;'>Podeés ingresar a la página para ver la oferta</p>
        " // Cuerpo
        );

      GetBarcosCargados();
    }

    private User getUser() {
        Transport transport = listTransportUseCase.Execute().Find(trans => trans.Id == vehicle.Id) ?? throw new Exception("transport not found");
        return userListUseCase.Execute().Find(user => user.Id == transport.UserId) ?? throw new Exception("user not found");
    }

    private string getTitle() {
        Post post = listPostUseCase.Execute().Find(post => post.TransportId == vehicle.Id) ?? throw new Exception("post not found");
        return post.Title;
    }
}