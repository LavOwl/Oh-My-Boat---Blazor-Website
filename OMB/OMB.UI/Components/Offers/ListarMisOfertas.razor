@page "/listarmisofertas"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject offerListUseCase offerListUseCase
@inject deleteOfferUseCase deleteOfferUseCase
@inject listPostUseCase listPostUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject vehicleListUseCase vehicleListUseCase
@inject NavigationManager navegador

<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="eliminarOferta"/>

<div class="offers-container">
    @if (offerList.Any()) {
        int i = 0;
        <table width="10%" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Transporte Solicitado</th>
                    <th>Estado</th>
                    <th>Ofreciendo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var offer in offerList){
                    <tr>
                        <td><img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_imgPost[i]))" height="145px" width="145px"/></td>
                        <td>
                            <h4>Oferta a @getOfferTarget(offer).userName </h4>
                            <p>Ofreces: tu @getOfferedTransport(offer).type.ToLower() @getOfferedTransport(offer).model </p>
                            <p>Pedís: @getPostedTransport(offer).type.ToLower() @getPostedTransport(offer).model</p>
                            <hr>
                            <p><strong class="izq">Tu oferta @getOfferStatus(offer) </strong>
                            @if ((getOfferState(offer) == "active") || (getOfferState(offer) == "paused")) {
                                <button class="StolenButton" @onclick="()=>confirmarEliminarOferta(offer)"> Cancelar </button>
                            }</p>
                        </td>
                        <td><img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(_imgOff[i]))" height="145px" width="145px"/></td>
                        @{i++;}
                    </tr>
                }
            </tbody>
        </table>
    } else {
        <h1>No hay ofertas realizadas</h1>
    }
</div>

@code {
    List<Offer> offerList = new List<Offer>();
        
    List<Transport> transportList = new List<Transport>();

    List<User> userList = new List<User>(); 

    DialogoConfirmacion dialogoConfirmacion = null!;

    int loggedUserId;
    List<byte[]> _imgOff = new List<byte[]>();
    List<byte[]> _imgPost = new List<byte[]>();

    Offer offerAux = new Offer();

    protected override async Task OnInitializedAsync() {
        //Inicializo en offerList las ofertas hechas por el usuario loggeado
        //Se supone que acá solo llegan los clientes loggeados
        var getLoggedUser = await sessionStorage.GetAsync<int>("userId");
        loggedUserId = getLoggedUser.Success ? getLoggedUser.Value : 0;

        userList = userListUseCase.Execute();

        transportList = listTransportUseCase.Execute();

        getOfferList();
    }

    public void travelToPost(Offer oferta){
        Transport t = vehicleListUseCase.Execute().Where(v => v.Id == oferta.transportePosteadoId).SingleOrDefault() ?? throw new Exception("transport not found");

        if (t != null) {
            navegador.NavigateTo($"/vehiclepost/{t.Id}", true);
        } else {
            navegador.NavigateTo($"/shippost/{oferta.transportePosteadoId}", true);
        }
    }

    public void getOfferList () {
        //Ids de todos los transportes del usuario loggeado
        List<int> transportIds = listTransportUseCase.Execute().Where(T => T.UserId == loggedUserId).ToList().Select(T => T.Id).ToList();
        
        //Todas las ofertas en las que se ofrecen transportes del usuario loggeado
        offerList = offerListUseCase.Execute().Where(O => transportIds.Contains(O.transporteOfertadoId)).ToList();

        //Agrego Imagenes
        List<ShipImage> shipImages;
        List<VehicleImage> vehicleImages;
        shipImages = listShipImagesUseCase.Execute();
        vehicleImages = listVehicleImagesUseCase.Execute();
        foreach (var oferta in offerList) {
            byte[]? image = (0 != shipImages.Where(imagen => imagen.ShipId == oferta.transporteOfertadoId).Count()) ? shipImages.Where(imagen => imagen.ShipId == oferta.transporteOfertadoId).First().Image : vehicleImages.Where(imagen => imagen.VehicleId == oferta.transporteOfertadoId).First().Image;
            _imgOff.Add(image);

            image = (0 != shipImages.Where(imagen => imagen.ShipId == oferta.transportePosteadoId).Count()) ? shipImages.Where(imagen => imagen.ShipId == oferta.transportePosteadoId).First().Image : vehicleImages.Where(imagen => imagen.VehicleId == oferta.transportePosteadoId).First().Image;
            _imgPost.Add(image);
        }
    }

    public User getOfferTarget(Offer offer) {
        return userList.Where(U => U.Id == getPostedTransport(offer).UserId).SingleOrDefault() ?? throw new Exception("user not found");
    }

    public Transport getOfferedTransport(Offer offer) {
        return transportList.Where(T => T.Id == offer.transporteOfertadoId).SingleOrDefault() ?? throw new Exception("transport not found");
    }

    public Transport getPostedTransport(Offer offer) {
        return transportList.Where(T => T.Id == offer.transportePosteadoId).SingleOrDefault() ?? throw new Exception("transport not found");
    }

    public bool isPaused(Offer offer) {
        Post postPosted = listPostUseCase.Execute().Where(P => P.TransportId == getPostedTransport(offer).Id).SingleOrDefault() ?? throw new Exception("post not found");
        Post postOfferer = listPostUseCase.Execute().Where(P => P.TransportId == getOfferedTransport(offer).Id).SingleOrDefault() ?? throw new Exception("post not found");
        if (postOfferer == null) {
            return postPosted.paused;
        }
        return postPosted.paused || postOfferer.paused;
    }

    public String getOfferStatus(Offer offer) {
        if (offer.state == "active" && isPaused(offer)) {
            offer.state = "paused";
        }
        return (offer.state == "paused") ? "está pausada" : (offer.state == "active") ? " está siendo evaluada" : (offer.state == "rejected") ? "fue rechazada" : "fue aceptada";
    }

    public String getOfferState(Offer offer) {
        if (offer.state == "active" && isPaused(offer)) {
            offer.state = "paused";
        }
        return offer.state;
    }

    public void confirmarEliminarOferta(Offer offer) {
        offerAux = offer;
        dialogoConfirmacion.Mostrar("¿Seguro qué deseas eliminar la oferta?");
    }

    private bool sonIguales(Offer o1, Offer o2) {
        //Se supone que no debería haber dos así
        return o1.transportePosteadoId == o2.transportePosteadoId && o1.transporteOfertadoId == o2.transporteOfertadoId;
    }

    public void eliminarOferta() {
        deleteOfferUseCase.Execute(offerAux.Id);
        getOfferList();
    }
}