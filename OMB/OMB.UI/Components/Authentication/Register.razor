@page "/register"
@inject NavigationManager navegador
@inject userListUseCase userListUseCase
@inject addUserUseCase addUserUseCase

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage

@rendermode InteractiveServer

<DialogoError @ref="dialogo"/>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-8">
            <div class="card border-dark">
                <div class="card-body">
                    <h1 class="h3 mb-4 text-center">Registrate</h1>
                    <form>
                        <div class="form-group">
                            <input placeholder="Dirección de correo electrónico" @bind="user.mail" class="form-control">
                        </div>
                        <div class="form-group">
                            <input placeholder="Nombre" @bind="user.name" class="form-control">
                        </div>
                        <div class="form-group">
                            <input placeholder="Apellido" @bind="user.surname" class="form-control">
                        </div>
                        <div class="form-group">
                            <input type="date" min="@((DateTime.Today.Year - 120).ToString())-01-01" @bind="user.birthDate" class="form-control">
                        </div>
                        <div class="form-group">
                            <input placeholder="Numero de telefono" @bind="user.number" class="form-control">
                        </div>
                        <div class="form-group">
                            <input placeholder="Nombre de usuario" @bind="user.userName" class="form-control">
                        </div>
                        <div class="form-group">
                            <input type="password" placeholder="Contraseña" @bind="user.password" class="form-control">
                        </div>
                        <div class="form-group">
                            <input type="password" placeholder="Confirmar contraseña" @bind="password2" class="form-control">
                        </div>
                        <div class="advertencia">
                            @textoAdvertencia
                        </div>
                        <button type="submit" class="btn btn-black btn-block" @onclick="Aceptar" @onclick:preventDefault >Aceptar</button>
                        <a href="login" class="btn btn-link mt-3">Ya tenés una cuenta?</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    User user = new User();
    String password2 = "";
    User? newUser;
    DialogoError dialogo = null!;

    private string textoAdvertencia = " ";

    protected override void OnInitialized() {
        user.birthDate = DateOnly.FromDateTime(DateTime.Today);
    }

    public async Task Save() {
        if (newUser != null) {
            await sessionStorage.SetAsync("userId", newUser.Id);
            await sessionStorage.SetAsync("isEmployee", false);
            await sessionStorage.SetAsync("cartel?", "Te haz registrado con exito");
        }
    }

    async Task Aceptar() {

        if (string.IsNullOrEmpty(user.userName) || string.IsNullOrEmpty(user.name) || string.IsNullOrEmpty(user.surname) || 
        string.IsNullOrEmpty(user.mail) || string.IsNullOrEmpty(user.password) || string.IsNullOrEmpty(password2) || 
        string.IsNullOrEmpty(user.number)) {
            textoAdvertencia = "Complete todos los campos";
            StateHasChanged();
            return;
        }
        if ((user.birthDate > DateOnly.FromDateTime(DateTime.Today)) || (DateOnly.FromDateTime(DateTime.Today) < user.birthDate.AddYears(18))) {
            textoAdvertencia = "Debe ser mayor de edad para crear una cuenta";
            StateHasChanged();
            return;
        }

        if (user.password.Length < 8) {
            textoAdvertencia = "La clave debe tener 8 caracteres como mínimo";
            StateHasChanged();
            return;
        }

        if (user.password != password2) {
            textoAdvertencia = "Las contraseñas ingresadas no coinciden";
            StateHasChanged();
            return;
        }

        try {
            addUserUseCase.Execute(user);
        }
        catch (Exception ex) {
            if (ex.Message == "Mail already in use!") {
                textoAdvertencia = "El mail ingresado ya corresponde con una cuenta";
                StateHasChanged();
                return;
            }
            if (ex.Message == "This username's already taken!") {
                textoAdvertencia = "Debe ser mayor de edad para crear una cuenta";
                StateHasChanged();
                return;
            }
        }

        newUser = userListUseCase.Execute().Where(elem => user.userName == elem.userName).SingleOrDefault();

        await Save();

        navegador.NavigateTo("/", true);
        
    }

}
