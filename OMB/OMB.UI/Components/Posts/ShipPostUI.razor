@page "/shippost/{postId:int?}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject listPostUseCase listPostUseCase
@inject shipListUseCase shipListUseCase
@inject userListUseCase userListUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject offerListUseCase offerListUseCase
@inject modifyOfferUseCase modifyOfferUseCase
@inject deletePostUseCase deletePostUseCase
@inject NavigationManager Navegador
@rendermode InteractiveServer

@if (actualPost != null && actualShip != null) { // parece que sin este if estaban habiendo problemas para cargar la pagina a veces (como que renderizaba antes de que es hayan conseguido las variables)
  <div class="ship-post-container">
    <div class="ship-post">
      <div class="carousel-container">
        <div id="carousel" class="carousel slide">
          <div class="carousel-inner">
            <div class="carousel-item active">
              <img class="ship-post-img" src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(images[i]))"
              height="450px" width="100%" style="object-fit: cover;"/>
            </div>
          </div>
          <button class="carousel-control-prev" type="button" @onclick=MoveLeft>
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
          </button>
          <button class="carousel-control-next" type="button" @onclick=MoveRight>
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
          </button>
        </div>
      </div>
      <h2 class="ship-post-title">@actualPost.Title</h2>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <h5>Modelo:  @actualShip.model</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <h5>Eslora:  @actualShip.eslora</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <h5>Manga:  @actualShip.manga</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <h5>Calado:  @actualShip.calado</h5>
        </div>
      </div>
      <div class="ship-post-info">
        <div class="ship-post-info-item">
          <h5>Tiene Motor:  @((actualShip.hasEngine) ? "Si" : "No")</h5>
        </div>
      </div>
      <p class="ship-post-description">@actualShip.description</p>
      <hr>
      @if((loggedUserId != 0) && (!isOwner) && (!isEmployee) && (!actualPost.paused)){
        <button class="btn btn-primary" @onclick="Ofertar" data-bs-toggle="modal" data-bs-target="#listarTransportesModal">Ofertar</button>
      }
      @if(isOwner && !actualPost.paused){
        <button class="btn btn-primary" @onclick="CargarOfertas" data-bs-toggle="modal" data-bs-target="#listarOfertasModal">Ver Ofertas</button>
      }
      <div class="d-flex">
        @if (actualPost.paused) {
            <div class="texto_pausa">
                <p><i class='bx bxs-error'></i><strong>  Publicación Pausada </strong></p>
            </div>
         }
         @if (loggedUserId == 1 && isEmployee) {
            <button class="btn btn-danger" @onclick="() => confirmarEliminarPost()">Eliminar post</button>
        }
      </div>
      
    </div>
  </div>
}

<ListarTransportesAOfertar @ref="listarTransportes" />
<ListarOfertasAPost @ref="listarOfertas" />
<DialogoConfirmacion @ref="dialogo" OnConfirmado="eliminarPost"/>

@code {
    [Parameter] public int? postId { get; set; }
    bool isOwner;
    bool isEmployee;
    Post actualPost = new Post();
    Ship actualShip = new Ship();

    ListarTransportesAOfertar listarTransportes = null!; 
    ListarOfertasAPost listarOfertas = null!;

    List<byte[]> images = new List<byte[]>(); // para las imagenes del post
    int limit = 0;  	  // para manejar el cap de imagenes
    int i = 0;
    int loggedUserId = 0;
    DialogoConfirmacion dialogo = null!;

    protected override void OnInitialized() {
        images.Add(new byte[0]);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            //Extrae el ID del usuario loggeado del sessionStorage
            var result3  = await sessionStorage.GetAsync<bool>("isEmployee");
            isEmployee = result3.Success ? result3.Value : false;
            var getLoggedUserId = await sessionStorage.GetAsync<int>("userId");
            loggedUserId = getLoggedUserId.Success ? getLoggedUserId.Value : 0;
            //Busco al owner del post
            actualPost = await Task.Run(() => listPostUseCase.Execute().Find(post => post.TransportId == postId)) ?? throw new Exception("post not found");
            if (actualPost != null) {
                actualShip = await Task.Run(() => shipListUseCase.Execute().Find(ship => ship.Id == actualPost.TransportId)) ?? throw new Exception("ship not found");
                if (actualShip != null) {
                    User owner = await Task.Run(() => userListUseCase.Execute().Find(user => user.Id == actualShip.UserId)) ?? throw new Exception("user not found");

                    //Checkeo si el owner y el usuario loggeado son el mismo user y guardo el resultado
                    isOwner = ((owner.Id == loggedUserId) && !isEmployee);

                    GetImages();
                }
            }

            StateHasChanged();
        }
    }

    private void Ofertar() {
        listarTransportes.Cargar(actualShip);
    }

    private void CargarOfertas() {
        listarOfertas.getOfferList(actualPost);
    }

    private void GetImages() {
        images = new List<byte[]>();
        var shipImages = listShipImagesUseCase.Execute().Where(img => img.ShipId == actualShip.Id);

        foreach (var img in shipImages) {
            images.Add(img.Image);
        }

        limit = images.Count() - 1;
    }

    public void MoveRight() {  // para moverse por el slider de imagenes
        if (i < limit) i++;
        else i = 0;

        StateHasChanged();
    }

    public void MoveLeft() {  // para moverse por el slider de imagenes
        if (i > 0) i--;
        else i = limit;

        StateHasChanged();
    }

    public void confirmarEliminarPost() {
        dialogo.Mostrar("¿Seguro qué deseas eliminar el post?");
    }
    public void eliminarPost() {
        List<Offer> ofertas = offerListUseCase.Execute().Where(o => o.transportePosteadoId == actualPost.TransportId).ToList();
        foreach(Offer offer in ofertas){
            offer.transportePosteadoId = 1;
            modifyOfferUseCase.Execute(offer);
        }
        deletePostUseCase.Execute(actualPost.Id);
        Navegador.NavigateTo("/");
    }

}