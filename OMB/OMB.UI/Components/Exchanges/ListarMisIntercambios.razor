@page "/listarmisintercambios"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navegador
@inject userListUseCase userListUseCase
@inject listTransportUseCase listTransportUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject listPostUseCase listPostUseCase
@inject shipListUseCase shipListUseCase
@inject listVehicleImagesUseCase listVehicleImagesUseCase
@inject listShipImagesUseCase listShipImagesUseCase
@inject listSedesUseCase listSedesUseCase

@if (shouldDisplay) {

    <div class="exchanges-container">
        <div class="exchanges">
            <h1 class="exchanges-title">Intercambios</h1>
            <div class="exchanges-body">
                @if (exchanges.Any()) {
                    int i = 0;
                    <table width="10%" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Publicado</th>
                                <th colspan="2">Estado del intercambio</th>
                                <th>Ofertado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var exchange in exchanges) {
                                <tr @onclick="()=>browseToExchange(exchange)">
                                    <td rowspan="2" class="img">
                                        <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(images[i]))" />
                                    </td>
                                    <td>
                                        <p><strong>Publicación: @getPostedTransport(exchange)</strong></p>
                                        <p>Dueño de la publicación: @getPostTarget(exchange)</p>
                                    </td>
                                    <td>
                                        <p><strong>Ofertado: @getOfferedTransport(exchange)</strong></p>
                                        <p>Ofertante: @getOfferTarget(exchange)</p>
                                    </td>
                                    <td rowspan="2" class="img">
                                        <img src="@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(imgOffer[i]))" />
                                    </td>
                                </tr>
                                <tr @onclick="()=>browseToExchange(exchange)">
                                    <td colspan="2">@getState(exchange)</td>
                                </tr>
                                i++;
                            }
                        </tbody>
                    </table>
                }
                else {
                    <h3 class="text-center">Aún no hay intercambios</h3>
                }
            </div>
        </div>
    </div>

}


@code {
    private bool shouldDisplay = false;

    List<UnresolvedExchange> unresolvedExchanges = new List<UnresolvedExchange>();
    List<UnresolvedExchange> exchanges = new List<UnresolvedExchange>();
    List<Transport> transports = new List<Transport>();
    List<Post> posts = new List<Post>();
    List<User> users = new List<User>();
    List<Sede> sedes = new List<Sede>();

    List<VehicleImage> vehicleImages = new List<VehicleImage>();
    List<ShipImage> shipImages = new List<ShipImage>();
    List<byte[]> images = new List<byte[]>();
    List<byte[]> imgOffer = new List<byte[]>();
    int loggedUserId;

    protected override async Task OnInitializedAsync() {
        // Inicializo en exchanges las ofertas hechas por el usuario loggeado
        // Se supone que acá solo llegan los clientes loggeados
        sedes = listSedesUseCase.Execute();
        var getLoggedUser = await sessionStorage.GetAsync<int>("userId");
        loggedUserId = getLoggedUser.Success ? getLoggedUser.Value : 0;

        // Inicializo listas para usarlas después
        users = userListUseCase.Execute();
        transports = listTransportUseCase.Execute();
        unresolvedExchanges = unresolvedExchangeListUseCase.Execute();

        posts = listPostUseCase.Execute();
        vehicleImages = listVehicleImagesUseCase.Execute();
        shipImages = listShipImagesUseCase.Execute();
        getExchanges();
        shouldDisplay = true;
    }

    private string getState(UnresolvedExchange exchange){
        string aux = exchange.state;
        if(!isOwner(exchange)){
            return (aux == "OffererStart") ? "Esperando recibir una propuesta" : (aux == "OffererChooses") ? "Te han ofrecido un horario" : (aux == "OwnerChooses") ? "Tu propuesta está siendo evaluada" : $"Intercambio programado para el {exchange.fechaYHora.ToString("dd/MM/yyyy HH:mm")} en la sede {sedes.FirstOrDefault(s => s.Id == exchange.sedeId).name}";
        }
        else{
            return (aux == "OffererStart") ? "Propone un horario para intercambiar" : (aux == "OffererChooses") ? "Tu propuesta está siendo evaluada" : (aux == "OwnerChooses") ? "Te han ofrecido un horario" : $"Intercambio programado para el {exchange.fechaYHora.ToString("dd/MM/yyyy HH:mm")} en la sede {sedes.FirstOrDefault(s => s.Id == exchange.sedeId).name}";
        }
    }

    private bool isOwner(UnresolvedExchange exchange){
        return listTransportUseCase.Execute().Where(t => (t.Id == exchange.transportePosteadoId) && (t.UserId == loggedUserId)).Count() > 0;
    }

    public void getExchanges () {
        // Ids de todos los transportes del usuario loggeado
        List<int> transportIds = transports.FindAll(T => T.UserId == loggedUserId).Select(T => T.Id).ToList();
        // Todas los intercambios donde se está involucrado un transporte del usuario
        exchanges = unresolvedExchanges.FindAll(Exc => transportIds.Contains(Exc.transporteOfertadoId) || transportIds.Contains(Exc.transportePosteadoId));
        exchanges.Reverse();
        getImages();
    }

    public void getImages() {
        foreach (var exchange in exchanges)
        {
            int transportId = exchange.transportePosteadoId;
            int offTrans = exchange.transporteOfertadoId;

            // Obtener la imagen para el transporte ofertado
            byte[] offImage = getImage(offTrans, isVehicle(offTrans));
            imgOffer.Add(offImage);

            // Obtener la imagen para el transporte posteado
            byte[] mainImage = getImage(transportId, isVehicle(transportId));
            images.Add(mainImage);
        }
    }

    private byte[] getImage(int transportId, bool isVehicle) {
        if (isVehicle)
        {
            var vehicleImage = vehicleImages.Find(img => img.VehicleId == transportId);
            return vehicleImage?.Image ?? new byte[0];
        }
        else
        {
            var shipImage = shipImages.Find(img => img.ShipId == transportId);
            return shipImage?.Image ?? new byte[0];
        }
    }

    public bool isVehicle (int transportId) {
        return !shipListUseCase.Execute().Any(ship => ship.Id == transportId);
    }

    // Obtiene el userName del dueño del post involucrado
    public string getPostTarget(UnresolvedExchange exchange) {
        Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId) ?? throw new Exception("transport not found");
        User postedTransportOwner = users.Find(user => user.Id == postedTransport.UserId) ?? throw new Exception("sede not found");
        return postedTransportOwner.userName;
    }

    // Obtiene el userName del dueño del transporte ofertado involucrado
    public string getOfferTarget(UnresolvedExchange exchange) {
        Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId) ?? throw new Exception("transport not found");
        User postedTransportOwner = users.Find(user => user.Id == offeredTransport.UserId) ?? throw new Exception("sede not found");
        return postedTransportOwner.userName;
    }

    // Obtiene la patente del transporte ofrecido
    public string getOfferedTransport(UnresolvedExchange exchange) {
        Transport offeredTransport = transports.Find(transport => transport.Id == exchange.transporteOfertadoId) ?? throw new Exception("transport not found");
        return $"{offeredTransport.type} {offeredTransport.model} {offeredTransport.plate}";
    }

    // Obtiene la patente del transporte publicado
    public string getPostedTransport(UnresolvedExchange exchange) {
        Transport postedTransport = transports.Find(transport => transport.Id == exchange.transportePosteadoId) ?? throw new Exception("transport not found");
        return $"{postedTransport.type} {postedTransport.model} {postedTransport.plate}";
    }

    public void browseToExchange(UnresolvedExchange exchange) {
        navegador.NavigateTo($"exchange/{exchange.Id}", true);
    }
}