@page "/sedes"
@inject NavigationManager navegador
@inject listSedesUseCase listSedesUseCase
@inject addSedeUseCase addSedeUseCase
@inject modifySedeUseCase modifySedeUseCase
@inject deleteSedeUseCase deleteSedeUseCase
@inject unresolvedExchangeListUseCase unresolvedExchangeListUseCase
@inject IJSRuntime JS

<DialogoError @ref="dialogo"/>
<DialogoConfirmacion @ref="dialogoConfirmacion" OnConfirmado="Eliminar"/>

<div class="container">
  <h1 class="title">Sedes</h1>
  <div id="map" style="height: 500px; width: 100%; margin: auto;"></div>
</div>

<div id="visualizarSedeModal" class="modal hide" data-backdrop="static" data-keyboard="false">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Ver sede</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form>
        <div class="modal-body form-body">
          <div class="form-group">
            <label class="mb-2">Nombre sede</label>
            <input class="form-control" type="text" @bind=sede.name required>
          </div>
        </div>
        <div class="modal-footer">
            @if (sedes.Count() == 1) {
              <button type="button" class="btn btn-danger" disabled>Eliminar</button>
            } else {
              <button type="button" class="btn btn-danger" @onclick="confirmarEliminacion">Eliminar</button>
            }
            <button type="button" class="btn btn-primary" @onclick="Modificar">Modificar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="agregarSedeModal" tabindex="-1"  data-backdrop="static" data-keyboard="false">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Agregar sede</h1>
        <button type="button" class="btn-close" @onclick="EliminarMarcador" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form>
        <div class="modal-body form-body">
          <div class="form-group">
            <label class="mb-2">Nombre sede</label>
            <input class="form-control" type="text" @bind=newName required>
          </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" @onclick="EliminarMarcador" data-bs-dismiss="modal">Cancelar</button>
            <button type="button" class="btn btn-success" @onclick="AgregarSede">Agregar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<Emails @ref=emails/>

<script type="text/javascript">
    var agregado = false; // Boolean para no agregar más de una sede a la vez
    var crearSede;

    var map = L.map('map').setView([-34.8765, -57.9069], 12);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    map.on("click", createMarker);

    // Icono gris usado cuando se crea un marcador o se está moviendo uno
    var newIcon = L.Icon.extend({
      options: {
        iconUrl: 'my-marker-icon.png',
        iconRetinaUrl: 'my-marker-icon-2x.png',
        shadowUrl: 'my-marker-shadow.png',
        shadowRetinaUrl: 'my-marker-shadow.png',
        iconSize: [25, 41], // Default Leaflet icon size
        iconAnchor: [12, 41], // Point of the icon which will correspond to marker's location
        popupAnchor: [1, -34], // Point from which the popup should open relative to the iconAnchor
        tooltipAnchor: [16, -28], // Point from which the tooltip should open relative to the iconAnchor
        shadowSize: [41, 41] // Default Leaflet shadow size
      }
    });

    // Crea el marcador para crear sedes
    function createMarker(e) {
      if (!agregado) {
        crearSede = L.marker(e.latlng, { draggable: true, icon: new newIcon() });
        crearSede.on("click", cargarSede);
        crearSede.addTo(map);
        agregado = true;

        cargarSede(e);
      }
    }

    function deleteMarker(e) {
      crearSede.remove();
      agregado = false;
    }

    // Detiene el dragging de todos los marcadores menos el movido y cambia el icono
    function modifySede(e) {
      const title = e.target.options.title;

      map.eachLayer(function(layer) {
        if (layer.options.title && layer.options.title != title) {
          layer.dragging.disable();
        }
      });

      e.target.setIcon(new newIcon());
    }

    // Busca la longitud y latitud elegidas y llama a SaveLatLng
    function cargarSede(e) {
      const latLng = e.latlng;
      const lat = latLng.lat;
      const lng = latLng.lng;

      DotNet.invokeMethodAsync("OMB.UI", "SaveLatLng", lat, lng)
        .then(() => {
          const modal = new bootstrap.Modal(document.getElementById('agregarSedeModal'), { backdrop: 'static', keyboard: false });
          modal.show();
        })
        .catch(err => console.error("Error invoking method:", err));
    }

    function mark(lat, long, name) {
      const marker = L.marker([lat, long], { title: name, draggable: true });
      marker.on("click", showOptions);
      marker.on("dragend", modifySede);

      marker.addTo(map).bindTooltip(name, { direction: "top", offset: [-15, 0], permanent: true });
    }

    function showOptions(e) {
      const name = e.target.options.title;
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;

      DotNet.invokeMethodAsync("OMB.UI", "ShowOptions", name, lat, lng)
        .then(() => {
          const modal = new bootstrap.Modal(document.getElementById('visualizarSedeModal'), { keyboard: false });
          modal.show();
        })
        .catch(err => console.error("Error invoking method:", err));
    }
</script>

@code {
    DialogoError dialogo = null!;
    DialogoConfirmacion dialogoConfirmacion = null!;
    Emails emails = null!;

    List<Sede> sedes = new List<Sede>();
    Sede sede = new Sede();

    double kmEntreSedes = 0.5;
    double newLat = 0;
    double newLng = 0;
    string newName = "";

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            sedes = listSedesUseCase.Execute().FindAll(s => s.isActive == true);

            foreach (Sede sede in sedes) {
                await JS.InvokeVoidAsync("mark", sede.latitude, sede.longitude, sede.name);
            }
        }
    }

    // Todo esto es para poder llamar a ShowOptions y SaveLatLng desde el JavaScript
    private static Func<string, double, double, Task>? ShowOptionsAsync;
    private static Func<double, double, Task>? SaveLatLngAsync;

    protected override void OnInitialized() {
        base.OnInitialized();
        ShowOptionsAsync = LocalShowOptionsAync;
        SaveLatLngAsync = LocalSaveLatLngAync;
    }

    public void Dispose() {
        ShowOptionsAsync = null;
        SaveLatLngAsync = null;
    }

    // Busca la sede seleccionada para mostrarla en el modal
    private Task LocalShowOptionsAync(string name, double lat, double lng) {
        sede = listSedesUseCase.Execute().Find(s => s.name == name) ?? throw new Exception("sede no encontrado");
        sede.latitude = lat;
        sede.longitude = lng;
        StateHasChanged();

        return Task.CompletedTask;
    }

    [JSInvokable]
    public static async Task ShowOptions(string value, double lat, double lng) {
        if (ShowOptionsAsync is {} actionAsync) {
            await actionAsync(value, lat, lng);
        }
    }

    // Guarda los valores de latitud y longitud cuando se mueve una marca
    private Task LocalSaveLatLngAync(double lat, double lng) {
        newLat = lat;
        newLng = lng;

        return Task.CompletedTask;
    }

    [JSInvokable]
    public static async Task SaveLatLng(double lat, double lng) {
        if (SaveLatLngAsync is {} actionAsync) {
            await actionAsync(lat, lng);
        }
    }

    private void confirmarEliminacion() {
        dialogoConfirmacion.Mostrar("¿Seguro qué deseas eliminar la sede?");
    }

    private void Eliminar() {
        var exchanges = unresolvedExchangeListUseCase.Execute().Where(e => e.sedeId == sede.Id && e.state == "Accepted").ToList();
        if(exchanges.Count() == 0){
          deleteSedeUseCase.Execute(sede.Id);
          navegador.NavigateTo("/sedes", true);
        }
        else{
          dialogo.Mostrar("Esta sede tiene intercambios programados, inténtelo nuevamente más tarde.");
        }
    }

    private void Modificar() {
        if (String.IsNullOrWhiteSpace(sede.name)) {
          dialogo.Mostrar("Debe ingresar un nombre a la nueva sede");
          return;
        }
        if (!distanciaValida(sede)) return;

        try {
            modifySedeUseCase.Execute(sede);
            navegador.NavigateTo("/sedes", true);
        }
        catch (Exception ex) {
            if (ex.Message == "Sede ya registrada") {
                dialogo.Mostrar("Nombre de sede ya registrado.");
            }
        }
    }

    private void AgregarSede() {
        Sede newSede = new Sede(newName, newLat, newLng);
        if (String.IsNullOrWhiteSpace(newName)) {
            dialogo.Mostrar("Debe ingresar un nombre a la nueva sede");
            return;
        }

        if (!distanciaValida(newSede)) return;

        try {
            addSedeUseCase.Execute(newSede);
            navegador.NavigateTo("/sedes", true);
        }
        catch (Exception ex) {
            if (ex.Message == "Sede ya registrada") {
                dialogo.Mostrar("Nombre de sede ya registrado.");
            }
        }
    }

    private async Task EliminarMarcador() {
      newName = "";
      await JS.InvokeVoidAsync("deleteMarker");
    }

    // Chequea contra todas las otras sedes si la ubicación elegida es válida
    private bool distanciaValida(Sede sede1) {
        foreach (Sede sede in sedes) {
            if (sede1.Id != sede.Id && distance(sede1, sede) < kmEntreSedes) {
                dialogo.Mostrar($"La sede debe estar a más de {kmEntreSedes}km de distancia del resto.");
                return false;
            }
        }
        return true;
    }

    // Calcula la distancia entre dos coodenadas (Horrible)
    private double distance(Sede sede1, Sede sede2) {
        double lat1 = sede1.latitude;
        double lng1 = sede1.longitude;
        double lat2 = sede2.latitude;
        double lng2 = sede2.longitude;

        int r = 6371; // Radio de la tierra en km
        double dLat = degToRad(lat2 - lat1);
        double dLng = degToRad(lng2 - lng1);

        double a = Math.Sin(dLat/2) * Math.Sin(dLat/2) +
          Math.Cos(degToRad(lat1)) * Math.Cos(degToRad(lat2)) * 
          Math.Sin(dLng/2) * Math.Sin(dLng/2);

        double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1-a));
        double d = r * c; // Distance in km
        return d;
    }

    // Transforma grados a radianes
    private double degToRad(double deg) {
        return deg * (Math.PI / 180);
    }

}