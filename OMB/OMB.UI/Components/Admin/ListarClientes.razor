@page "/listarclientes"
@inject userListUseCase userListUseCase
@inject listTransportUseCase transportListUseCase
@inject listPostUseCase postListUseCase
@inject NavigationManager navegador
<button class="btn btn-black btn-sm" @onclick="filtrarPorBan">@textoBotonBan</button>
<div class="container my-5 p-3 shadow-sm rounded bg-white">
    <table class="table table-striped table-hover table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Cantidad de publicaciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in listaClientes) {
                <tr @onclick="() => redirigirAlPerfil(cliente)" class="clickable-row">
                    <td>@cliente.userName</td>
                    <td>@cliente.mail</td>
                    <td>@cantidadPublicaciones(cliente)</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {

    List<User> listaClientes = new List<User>();
    List<Transport> listaTransportes = new List<Transport>();
    List<Post> listaPosteos = new List<Post>();
    string textoBotonBan = "Mostrar Baneados";
    bool mostrandoBaneados;

    protected void filtrarPorBan(){
        listaClientes = userListUseCase.Execute().Where(u => u.banned == mostrandoBaneados).OrderBy(user => user.userName).ToList();
        eliminarAlDefault();
        if(textoBotonBan == "Mostrar baneados"){
            textoBotonBan = "Mostrar no baneados";
        }
        else{
            textoBotonBan = "Mostrar baneados";
        }
        mostrandoBaneados = !mostrandoBaneados;
        StateHasChanged();
    }

    protected override void OnInitialized() {
        mostrandoBaneados = false;
        listaTransportes = transportListUseCase.Execute();

        listaClientes = userListUseCase.Execute().OrderBy(user => user.userName).ToList();

        listaPosteos = postListUseCase.Execute();

        eliminarAlDefault();

    }

    protected void eliminarAlDefault() {
        User notFound = listaClientes.SingleOrDefault(user => user.Id == 1);
        if(notFound != null){
            listaClientes.Remove(notFound);}
    }

    protected void redirigirAlPerfil (User user) {
        navegador.NavigateTo("/profile/" + user.userName, true);
    }

    protected int cantidadPublicaciones (User user) {

        return listaTransportes.Where(T => T.UserId == user.Id && isPost(T.Id)).Count();
    }

    protected bool isPost (int id) {
        return this.listaPosteos.Find(P => P.TransportId == id) != null;
    }

}